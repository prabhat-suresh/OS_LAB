alias userSP R0;
userSP = SP;

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;

alias fileName R1;
fileName = [([PTBR + (2 * ((userSP - 4)/ 512))]* 512) + ((userSP - 4) % 512)];

alias inode_entry R2;
inode_entry=0;
while(inode_entry<MAX_FILE_NUM) do 
	if(fileName==[INODE_TABLE + inode_entry*16 + 1] && [INODE_TABLE + inode_entry*16]==EXEC) then
		break;
	endif;
	inode_entry=inode_entry+1;
endwhile;

if(inode_entry==MAX_FILE_NUM) then
	
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

	SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

	[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512]=-1;

	ireturn;
endif;

multipush(R0,R1,R2,R3);

R1=EXIT_PROCESS;
R2=[SYSTEM_STATUS_TABLE + 1];
call MOD_1;

multipop(R0,R1,R2,R3);

[MEMORY_FREE_LIST+[PROCESS_TABLE+[SYSTEM_STATUS_TABLE + 1] * 16 + 11]]=[MEMORY_FREE_LIST+[PROCESS_TABLE+[SYSTEM_STATUS_TABLE + 1] * 16 + 11]]+1;

[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE + 1]*16+4]=RUNNING;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
//multipush(R0,R1,R2,R3);
//R1=GET_FREE_PAGE;
//R2=[SYSTEM_STATUS_TABLE+1];
//call MOD_2;
[PTBR+4]=-1;
[PTBR+5]="0000";
//multipop(R0,R1,R2,R3);

//multipush(R0,R1,R2,R3);
//R1=GET_FREE_PAGE;
//R2=[SYSTEM_STATUS_TABLE+1];
//call MOD_2;
[PTBR+6]=-1;
[PTBR+7]="0000";
//multipop(R0,R1,R2,R3);

//stack
multipush(R0,R1,R2,R3);
R1=GET_FREE_PAGE;
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_2;
[PTBR+16]=R0;
[PTBR+17]="0110";
//multipop(R0,R1,R2,R3);

//multipush(R0,R1,R2,R3);
R1=GET_FREE_PAGE;
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_2;
[PTBR+18]=R0;
[PTBR+19]="0110";
multipop(R0,R1,R2,R3);

//alias num_blocks R4;
//num_blocks=[INODE_TABLE+inode_entry*16+2]/512;
//
//if([INODE_TABLE+inode_entry*16+2]%512!=0) then
//	num_blocks=num_blocks+1;
//endif;

//alias cnt R5;
//cnt=4;
//
//while(cnt-4<num_blocks) do 
//	multipush(R0,R1,R2,R3,R4,R5);
//	R1=GET_FREE_PAGE;
//	R2=[SYSTEM_STATUS_TABLE+1];
//	call MOD_2;
//	[PTBR+2*cnt]=R0;
//	[PTBR+2*cnt+1]="0100";
//
//	R1=DISK_LOAD;
//	R2=[SYSTEM_STATUS_TABLE+1];
//	R3=[PTBR+2*cnt];
//	R4=[INODE_TABLE+inode_entry*16+8+(cnt-4)];
//	call MOD_4;
//	multipop(R0,R1,R2,R3,R4,R5);
//
//	cnt=cnt+1;
//endwhile;

multipush(R0,R1,R2,R3);
R1=GET_CODE_PAGE;
R2=[INODE_TABLE+inode_entry*16+8];
call MOD_2;
[PTBR+8]=R0;
[PTBR+9]="0100";
multipop(R0,R1,R2,R3);
[PTBR+10]=-1;
[PTBR+11]="0000";

[PTBR+12]=-1;
[PTBR+13]="0000";

[PTBR+14]=-1;
[PTBR+15]="0000";

alias cnt R4;
cnt=2;
while(cnt<10) do 
	[DISK_MAP_TABLE+10*[SYSTEM_STATUS_TABLE + 1]+cnt]=-1;
	cnt=cnt+1;
endwhile;

cnt=4;
while(cnt<8) do 
	[DISK_MAP_TABLE+10*[SYSTEM_STATUS_TABLE + 1]+cnt]=[INODE_TABLE+inode_entry*16+8+(cnt-4)];
	cnt=cnt+1;
endwhile;


[[PTBR+16]*512] = [[PTBR+8]* 512 + 1];
SP = 8*512;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn; 
