alias functionNum R1;
alias currentPID R2;

if(functionNum==FREE_USER_AREA_PAGE) then	
	
	alias pprt R3;
	pprt=[PROCESS_TABLE+16*currentPID+11]*512+RESOURCE_TABLE_OFFSET;
	alias cntr R4;
	cntr=0;
	while (cntr<8) do 
		if([pprt+cntr*2]==SEMAPHORE) then
			multipush(R0,R1,R2,R3,R4);
			R1=RELEASE_SEMAPHORE;
			R2=currentPID;
			R3=[pprt+cntr*2+1];
			call RESOURCE_MANAGER;
			multipop(R0,R1,R2,R3,R4);
		endif;
		if([pprt+cntr*2]==FILE) then
			multipush(R0,R1,R2,R3,R4);
			R1=CLOSE;
			R2=[pprt+cntr*2+1];
			call FILE_MANAGER;
			multipop(R0,R1,R2,R3,R4);
		endif;
		[pprt+cntr*2]=-1;
		cntr=cntr+1;
	endwhile;

	multipush(R1,R2,R3,R4);
	R1=RELEASE_PAGE;
	R2=[PROCESS_TABLE+16*currentPID+11];
	call MOD_2;
	multipop(R1,R2,R3,R4);
	return;	
endif;

if(functionNum==EXIT_PROCESS) then	

	if([PROCESS_TABLE+16*currentPID+9]!=9) then
		alias cntr R3;
		cntr=0;
		while(cntr<16) do 
			if([PROCESS_TABLE+16*cntr+4]==WAIT_PROCESS && [PROCESS_TABLE+16*cntr+5]==currentPID) then
				[PROCESS_TABLE+16*cntr+4]=READY;
			endif;

			if([PROCESS_TABLE+16*cntr+2]==currentPID) then
				[PROCESS_TABLE+16*cntr+2]=-1;
			endif;
			cntr=cntr+1;
		endwhile;
	endif;

	multipush(R1,R2);
	R1=FREE_PAGE_TABLE;
	call MOD_1;
	multipop(R1,R2);

	multipush(R1,R2);
	R1=FREE_USER_AREA_PAGE;
	call MOD_1;
	multipop(R1,R2);

	[PROCESS_TABLE+currentPID*16+4]=TERMINATED;
	return;
endif;

if(functionNum==FREE_PAGE_TABLE) then	
	alias ptbr1 R3;
	alias ptlr1 R4;
	ptbr1=[PROCESS_TABLE+16*currentPID+14];
	ptlr1=[PROCESS_TABLE+16*currentPID+15];

	[ptbr1+0]=-1;
	[ptbr1+1]="0000";
	[ptbr1+2]=-1;
	[ptbr1+3]="0000";

	alias counter R5;
	counter = 2;
	
	while(counter<ptlr1) do 
		if([ptbr1+2*counter]!=-1) then
			multipush(R1,R2,R3,R4,R5);
			R1=RELEASE_PAGE;
			R2=[ptbr1+2*counter];
			call MOD_2;
			multipop(R1,R2,R3,R4,R5);

			[ptbr1+2*counter+1]="0000";
			[ptbr1+2*counter]=-1;
		endif;
		counter=counter+1;
	endwhile;

	counter=2;
	while(counter<10) do 
		if((counter<4 || counter>7) && [DISK_MAP_TABLE+10*currentPID+counter]!=-1) then
			multipush(R1,R2,R3,R4,R5);
			R1=RELEASE_BLOCK;
			R2=[DISK_MAP_TABLE+10*currentPID+counter];
			call MOD_2;
			multipop(R1,R2,R3,R4,R5);
			[DISK_MAP_TABLE+10*currentPID+counter]=-1;
		endif;
		counter=counter+1;
	endwhile;

	return;
endif;

if(functionNum==GET_PCB_ENTRY) then
	R0=0;
	while(R0<16 && [PROCESS_TABLE+16*R0+4]!=TERMINATED) do 
		R0=R0+1;
	endwhile;

	if(R0==16) then
		R0=-1;
	else
		[PROCESS_TABLE+16*R0+1]=R0;	//set PID
		[PROCESS_TABLE+16*R0+4]=ALLOCATED;
		[PROCESS_TABLE+16*R0+14]=PAGE_TABLE_BASE+20*R0;
		[PROCESS_TABLE+16*R0+15]=10;
	endif;

	return;
endif;

if(functionNum==KILL_ALL) then
	alias cntr R4;
	cntr=0;
	while(cntr<MAX_FILE_NUM) do
		if([INODE_TABLE+cntr*16+1]!=-1) then
			multipush(R1,R2,R3,R4);
			R1=ACQUIRE_INODE;
			R2=currentPID;
			R3=cntr;
			call RESOURCE_MANAGER;
			multipop(R1,R2,R3,R4);
		endif;
		cntr=cntr+1;
	endwhile;
	
	cntr=2;
	while(cntr<MAX_PROC_NUM) do 
		if(cntr!=currentPID && [PROCESS_TABLE+cntr*16+4]!=TERMINATED) then
			multipush(R1,R2,R3,R4);
			R1=EXIT_PROCESS;
			R2=cntr;
			call PROCESS_MANAGER;
			multipop(R1,R2,R3,R4);
		endif;
		cntr=cntr+1;
	endwhile;
	
	cntr=0;
	while(cntr<MAX_FILE_NUM) do
		if([INODE_TABLE+cntr*16+1]!=-1) then
			multipush(R1,R2,R3,R4);
			R1=RELEASE_INODE;
			R2=currentPID;
			R3=cntr;
			call RESOURCE_MANAGER;
			multipop(R1,R2,R3,R4);
		endif;
		cntr=cntr+1;
	endwhile;

	return;
endif;