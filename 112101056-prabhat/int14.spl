alias userSP R0;
alias sysNum R1;

userSP=SP;
sysNum = [([PTBR + (2 * ((userSP - 5)/ 512))]* 512) + ((userSP - 5) % 512)];

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = sysNum;

if(sysNum==INT_SEMLOCK) then	
	alias sem_desc R2;
	sem_desc= [([PTBR + (2 * ((userSP - 4)/ 512))]* 512) + ((userSP - 4) % 512)];

	alias pprt R3;
	pprt=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + RESOURCE_TABLE_OFFSET;

	if(sem_desc<0 || sem_desc>7 || [pprt+sem_desc*2]!=1) then
		[([PTBR + (2 * ((userSP - 1)/ 512))]* 512) + ((userSP - 1) % 512)]=-1;
	else
		while([SEMAPHORE_TABLE+4*([pprt+2*sem_desc+1])]!=-1 && [SEMAPHORE_TABLE+4*([pprt+2*sem_desc+1])]!=[SYSTEM_STATUS_TABLE+1]) do 
			multipush(R0,R1,R2,R3);

			[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_SEMAPHORE;
			[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+5]=[pprt+2*sem_desc+1];

			call SCHEDULER;
			multipop(R0,R1,R2,R3);
		endwhile;

		[SEMAPHORE_TABLE+[pprt+sem_desc*2+1]*4]=[SYSTEM_STATUS_TABLE+1];
		
		[([PTBR + (2 * ((userSP - 1)/ 512))]* 512) + ((userSP - 1) % 512)]=0;
	endif;
endif;

if(sysNum==INT_SEMUNLOCK) then	
	alias sem_desc R2;
	sem_desc= [([PTBR + (2 * ((userSP - 4)/ 512))]* 512) + ((userSP - 4) % 512)];

	alias pprt R3;
	pprt=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + 496;

	if(sem_desc<0 || sem_desc>7 || [pprt+sem_desc*2]!=SEMAPHORE) then
		[([PTBR + (2 * ((userSP - 1)/ 512))]* 512) + ((userSP - 1) % 512)]=-1;
	else
		if([SEMAPHORE_TABLE+[pprt+sem_desc*2+1]*4]!=-1)	then
			if([SEMAPHORE_TABLE+[pprt+sem_desc*2+1]*4]!=[SYSTEM_STATUS_TABLE+1]) then
				[([PTBR + (2 * ((userSP - 1)/ 512))]* 512) + ((userSP - 1) % 512)]=-2;
			else
				[SEMAPHORE_TABLE+[pprt+sem_desc*2+1]*4]=-1;

				[([PTBR + (2 * ((userSP - 1)/ 512))]* 512) + ((userSP - 1) % 512)]=0;

				alias cntr R4;
				cntr=0;
				while(cntr<16) do 
					if([PROCESS_TABLE+cntr*16+4]==WAIT_SEMAPHORE && [PROCESS_TABLE+cntr*16+5]==[pprt+2*sem_desc+1]) then
						[PROCESS_TABLE+16*cntr+4]=READY;
					endif;
					cntr=cntr+1;
				endwhile;
			endif;

		else
			[([PTBR + (2 * ((userSP - 1)/ 512))]* 512) + ((userSP - 1) % 512)]=0;
		endif;
	endif;
endif;

SP=[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn; 
