alias functionNum R1;
alias currentPID R2;

if(functionNum==TERMINAL_WRITE) then

	multipush(R1,R2,R3,R4);
	R1=ACQUIRE_TERMINAL;
	R2=currentPID;

	call MOD_0;

	multipop(R1,R2,R3,R4);

	print R3;

	multipush(R1,R2,R3);
	R1=RELEASE_TERMINAL;
	R2=currentPID;

	call MOD_0;	//Return value will be stored in R0 by module 0. Save this return value in any other register if needed.

	multipop(R1,R2,R3);
	return;
endif;

if(functionNum==TERMINAL_READ) then
	
	multipush(R1,R2,R3);
	R1=ACQUIRE_TERMINAL;
	R2=currentPID;
	call MOD_0;

	multipop(R1,R2,R3);

	read; 
	[PROCESS_TABLE+currentPID*16+4]=WAIT_TERMINAL;

	multipush(R1,R2,R3);
	call MOD_5;

	multipop(R1,R2,R3);
	[[PTBR+2*(R3/512)]*512+R3%512]=[PROCESS_TABLE+currentPID*16+8];
	return;
endif;

if(functionNum==DISK_LOAD) then
	alias pageNum R3;
	alias blockNum R4;

	multipush(R1,R2,R3,R4);
	R1=ACQUIRE_DISK;
	R2=currentPID;
	call MOD_0;
	multipop(R1,R2,R3,R4);

	[DISK_STATUS_TABLE+1]=0;
	[DISK_STATUS_TABLE+2]=pageNum;
	[DISK_STATUS_TABLE+3]=blockNum;

	load(pageNum,blockNum);
	[PROCESS_TABLE+currentPID*16+4]=WAIT_DISK;
	call MOD_5;
	return;
endif;

if(functionNum==DISK_STORE) then
	alias pageNum R3;
	alias blockNum R4;

	multipush(R0,R1,R2,R3,R4);
	R1=ACQUIRE_DISK;
	R2=[SYSTEM_STATUS_TABLE+1];
	call RESOURCE_MANAGER;
	multipop(R0,R1,R2,R3,R4);

	[DISK_STATUS_TABLE+1]=1; 	//store
	[DISK_STATUS_TABLE+2]=pageNum;
	[DISK_STATUS_TABLE+3]=blockNum;

	store (pageNum,blockNum);
	[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+4]=WAIT_DISK;
	call SCHEDULER;
	return;
endif;