alias functionNum R1;
alias currentPID R2;
alias pt_entry R7;
pt_entry=PROCESS_TABLE+currentPID*16;

if(functionNum==8) then		//acquire terminal
	while([TERMINAL_STATUS_TABLE]==1) do 
		[pt_entry+4]=WAIT_TERMINAL;
		multipush(R1,R2);
		call MOD_5;
		multipop(R1,R2);
	endwhile;

	[TERMINAL_STATUS_TABLE+0]=1;
	[TERMINAL_STATUS_TABLE+1]=currentPID;
	return;
endif;

if(functionNum==9) then		//release terminal
	
	if(currentPID!=[TERMINAL_STATUS_TABLE+1]) then
		R0=-1;
		return;
	endif;

	[TERMINAL_STATUS_TABLE+0]=0;

	alias counter R4;
	counter=1;
	while(counter<=15) do 
		if([pt_entry+4]==WAIT_TERMINAL) then
			[pt_entry+4]=READY;
		endif;
		counter=counter+1;
	endwhile;
	R0=0;
	return;
endif;

if(functionNum==ACQUIRE_DISK) then
	while([DISK_STATUS_TABLE+0]==1) do 
		[pt_entry+4]=WAIT_DISK;
		multipush(R1,R2);
		call MOD_5;
		multipop(R1,R2);
	endwhile;

	[DISK_STATUS_TABLE+0]=1;
	[DISK_STATUS_TABLE+4]=currentPID;
	return;
endif;

if(functionNum==ACQUIRE_SEMAPHORE) then
	alias cntr R0;
	cntr=0;
	while (cntr<MAX_SEM_COUNT) do 
		if([SEMAPHORE_TABLE+cntr*4+1]==0) then
			[SEMAPHORE_TABLE+cntr*4+1]=1;
			[SEMAPHORE_TABLE+cntr*4]=-1;
			return;
		endif;
		cntr=cntr+1;
	endwhile;
	R0=-1;
	return;
endif;

if(functionNum==RELEASE_SEMAPHORE) then
	alias semid R3;
	alias cntr R4;
	if([SEMAPHORE_TABLE+semid*4]==currentPID) then
		[SEMAPHORE_TABLE+semid*4]=-1;
		cntr=0;
		while(cntr<MAX_PROC_NUM) do 
			if([pt_entry+4]==WAIT_SEMAPHORE && [pt_entry+5]==semid) then
				[pt_entry+4]=READY;
			endif;
			cntr=cntr+1;
		endwhile;
	endif;
	
	[SEMAPHORE_TABLE+semid*4+1]=[SEMAPHORE_TABLE+semid*4+1]-1;
	return;
endif;

if(functionNum==ACQUIRE_INODE) then
	alias inode_index R3;
	while([FILE_STATUS_TABLE+inode_index*4]!=-1) do
		[pt_entry+4]=WAIT_FILE;
		[pt_entry+5]=inode_index;
		multipush(R1,R2,R3,R4,R5,R6,R7);
		call SCHEDULER;
		multipop(R1,R2,R3,R4,R5,R6,R7);
	endwhile;
	
	if([INODE_TABLE+inode_index*16+1]==-1) then
		R0=-1;
		return;
	endif;
	
	[FILE_STATUS_TABLE+inode_index*4]=currentPID;
	R0=0;
	return;
endif;

if(functionNum==RELEASE_INODE) then
	alias inode_index R3;

	if(currentPID!=[FILE_STATUS_TABLE+inode_index*4]) then
		R0=-1;
		return;
	endif;
	
	[FILE_STATUS_TABLE+inode_index*4]=-1;

	alias cntr R4;
	cntr=0;
	while (cntr<16) do
		if([pt_entry+4]==WAIT_FILE && [pt_entry+5]==inode_index) then
			[pt_entry+4]=READY;
		endif;
		cntr=cntr+1;
	endwhile;
	R0=0;
	return;
endif;