loadi(63,13);
loadi(64,14);	// library code

loadi(65,7);
loadi(66,8);	// init code

// loadi(83,69);	// even code
// loadi(87,70);	// primes code

loadi(22,35);	//INT10
loadi(23,36);

loadi(2, 15);	//exhandler
loadi(3, 16);

loadi(4, 17);
loadi(5, 18);	//timer interrupt handler

loadi(16,29);
loadi(17,30);	//INT7

loadi(50,63);	// MOD_5 (scheduler)
loadi(51,64);

loadi(40,53);	// mod 0 (resource manager)
loadi(41,54);

loadi(48,61);	// mod 4 (device manager)
loadi(49,62);

loadi(8,21);	// console interrupt
loadi(9,22);

loadi(14,27);	// INT6
loadi(15,28);

loadi(20,33);	// INT9
loadi(21,34);

loadi(42,55);	// MOD_1 (process manager)
loadi(43,56);

loadi(44,57);	// MOD_2 (memory manager)
loadi(45,58);

loadi(59,3);	// Inode Table
loadi(60,4);

loadi(6,19);	// Disk interrupt 
loadi(7,20);

loadi(61,2);	// Disk free list

loadi(18,31);	// fork int 8
loadi(19,32);

loadi(24,37);	// int 11
loadi(25,38);

loadi(32,45);	// int 15
loadi(33,46);

loadi(28,41);	// int 13
loadi(29,42);

loadi(30,43);	// int 14
loadi(31,44);

loadi(10,23);	// int 4
loadi(11,24);

PTBR=PAGE_TABLE_BASE+20;

// pid 1 (init (odd))
//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[PROCESS_TABLE + 11+16] = 80; 	// user area page

[PROCESS_TABLE + 1 + 16] = 1;	// PID of init process will be 1

[PROCESS_TABLE + 4 + 16] = CREATED;	//state field
[PROCESS_TABLE + 13 +16] = 8*512;	//uptr
[PROCESS_TABLE + 12 +16] = 0;		//kptr

[PROCESS_TABLE + 14 + 16] = PAGE_TABLE_BASE+20;	//ptbr
[PROCESS_TABLE + 15 + 16] = 10;			//ptlr

[76*512] = [65 * 512 + 1];

//PTBR=PAGE_TABLE_BASE+40;
//
//// pid 2 (even)
////Library
//[PTBR+0] = 63;
//[PTBR+1] = "0100";
//[PTBR+2] = 64;
//[PTBR+3] = "0100";
//
////Heap
//[PTBR+4] = -1;
//[PTBR+5] = "0110";
//[PTBR+6] = -1;
//[PTBR+7] = "0110";
//
////Code
//[PTBR+8] = 83;
//[PTBR+9] = "0100";
//[PTBR+10] = -1;
//[PTBR+11] = "0100";
//[PTBR+12] = -1;
//[PTBR+13] = "0000";
//[PTBR+14] = -1;
//[PTBR+15] = "0000";
//
////Stack
//[PTBR+16] = 84;
//[PTBR+17] = "0110";
//[PTBR+18] = 85;
//[PTBR+19] = "0110";
//
//[PROCESS_TABLE + 11+16*2] = 86; 	// user area page
//
//[PROCESS_TABLE + 1 + 16*2] = 2;	// PID of even process will be 2
//
//[PROCESS_TABLE + 4 + 16*2] = CREATED;	//state field
//[PROCESS_TABLE + 13 +16*2] = 8*512;	//uptr
//[PROCESS_TABLE + 12 +16*2] = 0;		//kptr
//
//[PROCESS_TABLE + 14 + 16*2] = PAGE_TABLE_BASE+40;	//ptbr
//[PROCESS_TABLE + 15 + 16*2] = 10;			//ptlr
//
//[84*512] = [83 * 512 + 1];
//
//PTBR=PAGE_TABLE_BASE+60;
//
//// pid 3 (primes)
//
////Library
//[PTBR+0] = 63;
//[PTBR+1] = "0100";
//[PTBR+2] = 64;
//[PTBR+3] = "0100";
//
////Heap
//[PTBR+4] = -1;
//[PTBR+5] = "0110";
//[PTBR+6] = -1;
//[PTBR+7] = "0110";
//
////Code
//[PTBR+8] = 87;
//[PTBR+9] = "0100";
//[PTBR+10] = -1;
//[PTBR+11] = "0100";
//[PTBR+12] = -1;
//[PTBR+13] = "0000";
//[PTBR+14] = -1;
//[PTBR+15] = "0000";
//
////Stack
//[PTBR+16] = 88;
//[PTBR+17] = "0110";
//[PTBR+18] = 89;
//[PTBR+19] = "0110";
//
//[PROCESS_TABLE + 11+16*3] = 90; 	// user area page
//
//[PROCESS_TABLE + 1 + 16*3] = 3;	// PID of even process will be 2
//
//[PROCESS_TABLE + 4 + 16*3] = CREATED;	//state field
//[PROCESS_TABLE + 13 +16*3] = 8*512;	//uptr
//[PROCESS_TABLE + 12 +16*3] = 0;		//kptr
//
//[PROCESS_TABLE + 14 + 16*3] = PAGE_TABLE_BASE+60;	//ptbr
//[PROCESS_TABLE + 15 + 16*3] = 10;			//ptlr
//
//[88*512] = [87 * 512 + 1];

alias counter R0;

counter=2;
while(counter<10) do 
	[DISK_MAP_TABLE+10*1+counter]=-1;
	counter=counter+1;
endwhile;

counter=4;
while(counter<8) do 
	[DISK_MAP_TABLE+10*1+counter]=[INODE_TABLE+(7+counter-4)*16+8+(counter-4)];
	counter=counter+1;
endwhile;

counter=2;

while (counter<=15) do 
	[PROCESS_TABLE + 4 + 16*counter] = TERMINATED;
	counter=counter+1;
endwhile;

[TERMINAL_STATUS_TABLE+0]=0;	//terminal is free initially
[DISK_STATUS_TABLE+0]=0;	//disk is free initially

counter=0;
while(counter<83) do 
	[MEMORY_FREE_LIST+counter]=1;
	counter=counter+1;
endwhile;

while(counter<128) do 
	[MEMORY_FREE_LIST+counter]=0;
	counter=counter+1;
endwhile;

[SYSTEM_STATUS_TABLE+3]=0;
[SYSTEM_STATUS_TABLE+2]=128-83;

counter=0;
while(counter<32) do 
	[SEMAPHORE_TABLE+counter*4]=-1;
	[SEMAPHORE_TABLE+counter*4+1]=0;
	counter=counter+1;
endwhile;

counter=0;
alias pprt R15;
pprt=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11]*512+RESOURCE_TABLE_OFFSET;
while(counter<16) do
	[pprt+counter]=-1;
	counter=counter+2;
endwhile;

//initializing file status Table
counter=0;
while(counter<MAX_FILE_NUM) do
	[FILE_STATUS_TABLE+counter*4]=-1;
	[FILE_STATUS_TABLE+counter*4+1]=-1;
	counter=counter+1;
endwhile;

//initializing BUFFER_TABLE
counter=0;
while(counter<4) do
	[BUFFER_TABLE+counter*4]=-1;
	[BUFFER_TABLE+counter*4+1]=0;
	[BUFFER_TABLE+counter*4+2]=-1;
	counter=counter+1;
endwhile;

[PROCESS_TABLE+16+3]=1; //init userid is set to root

return;