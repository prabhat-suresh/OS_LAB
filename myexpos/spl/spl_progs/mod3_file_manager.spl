alias functionNum R1;

if(functionNum==OPEN) then
    alias filename R2;
    alias inode_index R3;
    inode_index=0;
    while(inode_index<MAX_FILE_NUM) do
        if([INODE_TABLE+inode_index*16+1]==filename) then
            break;
        endif;
        inode_index=inode_index+1;
    endwhile;

    if(inode_index==MAX_FILE_NUM) then
        R0=-1;
        return;
    endif;

    multipush(R1,R2,R3); 
    R1=ACQUIRE_INODE;
    R2=[SYSTEM_STATUS_TABLE+1];
    R3=inode_index;
    call RESOURCE_MANAGER;
    if(R0==-1) then
        return;
    endif;

    multipop(R1,R2,R3); 

    if([INODE_TABLE+16*inode_index]==EXEC) then

        R1=RELEASE_INODE;
        R2=[SYSTEM_STATUS_TABLE+1];
        R3=inode_index;
        call RESOURCE_MANAGER;
        R0=-1;
        return;
    endif;

    alias oftIndex R4;
    oftIndex=0;
    while(oftIndex<MAX_OPENFILE_NUM) do
        if([OPEN_FILE_TABLE+4*oftIndex]==-1) then
            break;
        endif;
        oftIndex=oftIndex+1;
    endwhile;
    R0=oftIndex;

    if(oftIndex==MAX_OPENFILE_NUM) then
        
        R1=RELEASE_INODE; 
        R2=[SYSTEM_STATUS_TABLE+1];
        R3=inode_index;
        call RESOURCE_MANAGER;
        R0=-2;
        return;
    endif;

    if(filename=="root") then
        [OPEN_FILE_TABLE+oftIndex*4]=INODE_ROOT;
    else 
        if([FILE_STATUS_TABLE+inode_index*4+1]==-1) then
            [FILE_STATUS_TABLE+inode_index*4+1]=1;
        else
            [FILE_STATUS_TABLE+inode_index*4+1]=[FILE_STATUS_TABLE+inode_index*4+1]+1;
        endif;
        [OPEN_FILE_TABLE+oftIndex*4]=inode_index;
    endif;

    [OPEN_FILE_TABLE+oftIndex*4+1]=1;
    [OPEN_FILE_TABLE+oftIndex*4+2]=0;

    R1=RELEASE_INODE; 
    R2=[SYSTEM_STATUS_TABLE+1];
    R3=inode_index;
    call RESOURCE_MANAGER;
    return;
endif;

if(functionNum==CLOSE) then
    alias oftIndex R2;
    alias inode_index R3;
    inode_index = [OPEN_FILE_TABLE+4*oftIndex];
    [OPEN_FILE_TABLE+4*oftIndex+1]=[OPEN_FILE_TABLE+4*oftIndex+1]-1;

    if([OPEN_FILE_TABLE+4*oftIndex+1]==0) then
        [OPEN_FILE_TABLE+4*oftIndex+0]=-1;
        [OPEN_FILE_TABLE+4*oftIndex+1]=-1;
        [OPEN_FILE_TABLE+4*oftIndex+2]=-1;
        [OPEN_FILE_TABLE+4*oftIndex+3]=-1;
    endif;

    if([INODE_TABLE+inode_index*16+1]!="root") then
        [FILE_STATUS_TABLE+inode_index*4+1]=[FILE_STATUS_TABLE+inode_index*4+1]-1;
        if([FILE_STATUS_TABLE+inode_index*4+1]==0) then
            [FILE_STATUS_TABLE+inode_index*4+1]=-1;
        endif;
    endif;
    return;
endif;

if(functionNum==BUFFERED_READ || functionNum==BUFFERED_WRITE) then
    alias disk_blk_num R2;
    alias offset R3;
    alias addr R4;

    alias buffNum R5;
    buffNum=disk_blk_num % 4;
    
    multipush(R1,R2,R3,R4,R5);
    R1=ACQUIRE_BUFFER;
    R2=[SYSTEM_STATUS_TABLE+1];
    R3=buffNum;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5);

    if([BUFFER_TABLE+buffNum*4]!=disk_blk_num) then
        if([BUFFER_TABLE+buffNum*4+1]==1) then

            multipush(R1,R2,R3,R4,R5);
            R1=DISK_STORE;
            R2=[SYSTEM_STATUS_TABLE+1];
            R3=71+buffNum;
            R4=[BUFFER_TABLE+buffNum*4];
            call DEVICE_MANAGER;
            multipop(R1,R2,R3,R4,R5);

            if(functionNum==BUFFERED_READ) then
                [BUFFER_TABLE+buffNum*4+1]=0;
            endif;
        endif;

        multipush(R1,R2,R3,R4,R5);
        R1=DISK_LOAD;
        R4=disk_blk_num;
        R2=[SYSTEM_STATUS_TABLE+1];
        R3=BUFFER_BASE+buffNum;
        call DEVICE_MANAGER;
        multipop(R1,R2,R3,R4,R5);

        [BUFFER_TABLE+buffNum*4]=disk_blk_num;
    endif;

    if(functionNum==BUFFERED_READ) then
        [addr]=[(BUFFER_BASE+buffNum)*512+offset];
    else
        [(BUFFER_BASE+buffNum)*512+offset]=[addr];

        [BUFFER_TABLE+buffNum*4+1]=1;
    endif;

    multipush(R1,R2,R3,R4,R5);
    R1=RELEASE_BUFFER;
    R2=[SYSTEM_STATUS_TABLE+1];
    R3=buffNum;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5);

    return;
endif;