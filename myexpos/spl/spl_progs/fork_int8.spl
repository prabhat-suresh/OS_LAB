[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 8;

R1=GET_PCB_ENTRY;
alias childPID R11;
call MOD_1;
childPID=R0;

if(childPID==-1) then
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

	SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

	[[PTBR + 2 * ((([PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13]) - 1) / 512)] * 512 + (([PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13]) - 1) % 512]=-1;

	ireturn;
endif;

if([PTBR+4]==-1) then
	R1=GET_FREE_PAGE;
	R2=[SYSTEM_STATUS_TABLE+1];
	multipush(R11);
	call MOD_2;
	[PTBR+4]=R0;
	[PTBR+5]="1110";
	multipop(R11);

	R1=GET_FREE_PAGE;
	R2=[SYSTEM_STATUS_TABLE+1];
	multipush(R11);
	call MOD_2;
	[PTBR+6]=R0;
	[PTBR+7]="1110";
	multipop(R11);
endif;

R1=GET_FREE_PAGE;
R2=childPID;
multipush(R11);
call MOD_2;
multipop(R11);
[PAGE_TABLE_BASE+childPID*20+16]=R0;
[PAGE_TABLE_BASE+20*childPID+17]="0110";

R1=GET_FREE_PAGE;
R2=childPID;
multipush(R11);
call MOD_2;
multipop(R11);
[PAGE_TABLE_BASE+20*childPID+18]=R0;
[PAGE_TABLE_BASE+20*childPID+19]="0110";

R1=GET_FREE_PAGE;
R2=childPID;
multipush(R11);
call MOD_2;
multipop(R11);
[PROCESS_TABLE+16*childPID+11]=R0;

// initialize process table

[PROCESS_TABLE+16*childPID+3]=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 3];
[PROCESS_TABLE+16*childPID+6]=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 6];
[PROCESS_TABLE+16*childPID+7]=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 7];
[PROCESS_TABLE+16*childPID+10]=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 10];
[PROCESS_TABLE+16*childPID+13]=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];

[PROCESS_TABLE+16*childPID+0]=0;
[PROCESS_TABLE+16*childPID+9]=0;
[PROCESS_TABLE+16*childPID+12]=0;
[PROCESS_TABLE+16*childPID+2]=[SYSTEM_STATUS_TABLE+1];
[PROCESS_TABLE+16*childPID+4]=CREATED;

alias counter R12;
counter=2;

while (counter<10) do 
	[DISK_MAP_TABLE+childPID*10+counter]=[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+counter];
	counter=counter+1;
endwhile;

counter=0;

while (counter<16) do 
	[PAGE_TABLE_BASE+childPID*20+counter]=[PTBR+counter];
	if(counter%2==0) then
		[MEMORY_FREE_LIST+[PTBR+counter]]=[MEMORY_FREE_LIST+[PTBR+counter]]+1;
	endif;
	counter=counter+1;
endwhile;

counter=0;
while (counter<512) do 
	[[PAGE_TABLE_BASE+childPID*20+16]*512+counter]=[[PTBR+16]*512+counter];
	[[PAGE_TABLE_BASE+childPID*20+18]*512+counter]=[[PTBR+18]*512+counter];
	counter=counter+1;
endwhile;

[[PROCESS_TABLE + childPID*16 + 11]*512] = BP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

[[PTBR + 2 * ((([PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13]) - 1) / 512)] * 512 + (([PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13]) - 1) % 512]=childPID;

[[PAGE_TABLE_BASE+20*childPID + 2 * ((([PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13]) - 1) / 512)] * 512 + (([PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13]) - 1) % 512]=0;

ireturn;
