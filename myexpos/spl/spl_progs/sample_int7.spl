alias userSP R1;
alias sysNum R2;
alias ret_addr R3;
alias pt_entry R4;
alias fileDescriptor R5;
pt_entry=PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16;

userSP=SP;
//sysNum = [([PTBR + (2 * ((userSP - 5)/ 512))]* 512) + ((userSP - 5) % 512)];
ret_addr = ([PTBR + (2 * ((userSP - 1)/ 512))]* 512) + ((userSP - 1) % 512);
fileDescriptor = [([PTBR + (2 * ((userSP - 4)/ 512))]* 512) + ((userSP - 4) % 512)];

[pt_entry + 13] = SP;
SP = [pt_entry + 11] * 512 - 1;

[pt_entry + 9] = 7;

if (fileDescriptor == -2) then
	multipush(R0,R1,R2,R3,R4,R5);
	R3=[[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
	R1=TERMINAL_WRITE;
	R2=[SYSTEM_STATUS_TABLE+1];
	call MOD_4;
	multipop(R0,R1,R2,R3,R4,R5);

	[ret_addr]=0;

else 
	if(fileDescriptor<0 || fileDescriptor>7) then
		[ret_addr]=-1;

		SP=[pt_entry + 13];
		[pt_entry + 9] = 0;

		ireturn; 
	endif;

	alias pprt R6;
	pprt=[pt_entry+16*[SYSTEM_STATUS_TABLE+1]+11]*512+RESOURCE_TABLE_OFFSET;

	if([pprt+fileDescriptor*2]!=FILE) then
		[ret_addr]=-1;

		SP=[pt_entry + 13];
		[pt_entry + 9] = 0;

		ireturn; 
	endif;

	alias oftIndex R7;
	oftIndex=[pprt+fileDescriptor*2+1];

	alias inode_index R8;
	inode_index=[OPEN_FILE_TABLE+oftIndex*4];

	if([pt_entry+3]!=ROOT && [pt_entry+3]!=[INODE_TABLE+16*inode_index+3] && [INODE_TABLE+16*inode_index+4]==EXCLUSIVE) then
		[ret_addr]=-3;

		SP=[pt_entry + 13];
		[pt_entry + 9] = 0;

		ireturn; 
	endif;

	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	R1=ACQUIRE_INODE;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=inode_index;
	call RESOURCE_MANAGER;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);
	if(R0==-1) then
		[ret_addr]=-1;

		SP=[pt_entry + 13];
		[pt_entry + 9] = 0;

		ireturn; 
	endif;

	alias lseek R9;
	lseek=[OPEN_FILE_TABLE+oftIndex*4+2];
	
	alias word_addr R10;
	word_addr=[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512);

	if(lseek==MAX_FILE_SIZE) then

		multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
		R1=RELEASE_INODE;
		R2=[SYSTEM_STATUS_TABLE+1];
		R3=inode_index;
		call RESOURCE_MANAGER;
		
		multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
		[ret_addr]=-2;

		SP=[pt_entry + 13];
		[pt_entry + 9] = 0;

		ireturn; 
	endif;

	if(lseek%512==0 && lseek==[INODE_TABLE+inode_index*16+2]) then
		R1=GET_FREE_BLOCK;
		call MEMORY_MANAGER;
		if(R0==-1) then
			multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
			R1=RELEASE_INODE;
			R2=[SYSTEM_STATUS_TABLE+1];
			R3=inode_index;
			call RESOURCE_MANAGER;
			
			multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
			[ret_addr]=-2;

			SP=[pt_entry + 13];
			[pt_entry + 9] = 0;

			ireturn; 
		endif;	
		
		[INODE_TABLE+(lseek/512)+16*inode_index+8]=R0;
	endif;

	alias block_index R12;
	alias block_num R13;
	alias block_offset R14;
	block_index=lseek/512;
	block_offset=lseek%512;
	block_num=[INODE_TABLE+inode_index*16+8+block_index];
	
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14);
	R1=BUFFERED_WRITE;
	R2=block_num;
	R3=block_offset;
	R4=word_addr;
	call FILE_MANAGER;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14);
	
	if(lseek==[INODE_TABLE+inode_index*16+2]) then
		[INODE_TABLE+inode_index*16+2]=[INODE_TABLE+inode_index*16+2]+1;
		[ROOT_FILE+8*inode_index+1]=[ROOT_FILE+8*inode_index+1]+1;
	endif;

	[OPEN_FILE_TABLE+oftIndex*4+2]=[OPEN_FILE_TABLE+oftIndex*4+2]+1;

	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14);
	R1=RELEASE_INODE;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=inode_index;
	call RESOURCE_MANAGER;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14);

	[ret_addr]=0;
endif;

SP=[pt_entry + 13];
[pt_entry + 9] = 0;

ireturn; 